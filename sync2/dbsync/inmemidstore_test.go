package dbsync

import (
	"encoding/hex"
	"testing"

	"github.com/spacemeshos/go-spacemesh/common/types"
	"github.com/spacemeshos/go-spacemesh/common/util"
	"github.com/stretchr/testify/require"
)

func TestInMemIDStore(t *testing.T) {
	var (
		it  iterator
		err error
	)
	s := newInMemIDStore(32, 24)

	_, err = s.start()
	require.ErrorIs(t, err, errEmptySet)

	_, err = s.iter(util.FromHex("0000000000000000000000000000000000000000000000000000000000000000"))
	require.ErrorIs(t, err, errEmptySet)

	for _, h := range []string{
		"0000000000000000000000000000000000000000000000000000000000000000",
		"1234561111111111111111111111111111111111111111111111111111111111",
		"123456789abcdef0000000000000000000000000000000000000000000000000",
		"5555555555555555555555555555555555555555555555555555555555555555",
		"8888888888888888888888888888888888888888888888888888888888888888",
		"8888889999999999999999999999999999999999999999999999999999999999",
		"abcdef1234567890000000000000000000000000000000000000000000000000",
	} {
		s.registerHash(util.FromHex(h))
	}

	for i := range 6 {
		if i%2 == 0 {
			it, err = s.start()
		} else {
			it, err = s.iter(
				util.FromHex("0000000000000000000000000000000000000000000000000000000000000000"))
		}
		require.NoError(t, err)
		var items []string
		for range 7 {
			items = append(items, hex.EncodeToString(it.Key().(KeyBytes)))
			require.NoError(t, it.Next())
		}
		require.Equal(t, []string{
			"0000000000000000000000000000000000000000000000000000000000000000",
			"1234561111111111111111111111111111111111111111111111111111111111",
			"123456789abcdef0000000000000000000000000000000000000000000000000",
			"5555555555555555555555555555555555555555555555555555555555555555",
			"8888888888888888888888888888888888888888888888888888888888888888",
			"8888889999999999999999999999999999999999999999999999999999999999",
			"abcdef1234567890000000000000000000000000000000000000000000000000",
		}, items)
		require.Equal(t,
			"0000000000000000000000000000000000000000000000000000000000000000",
			hex.EncodeToString(it.Key().(KeyBytes)))

		s1 := s.clone()
		h := types.BytesToHash(
			util.FromHex("2000000000000000000000000000000000000000000000000000000000000000"))
		s1.registerHash(h[:])
		items = nil
		it, err = s1.iter(
			util.FromHex("0000000000000000000000000000000000000000000000000000000000000000"))
		require.NoError(t, err)
		for range 8 {
			items = append(items, hex.EncodeToString(it.Key().(KeyBytes)))
			require.NoError(t, it.Next())
		}
		require.Equal(t, []string{
			"0000000000000000000000000000000000000000000000000000000000000000",
			"1234561111111111111111111111111111111111111111111111111111111111",
			"123456789abcdef0000000000000000000000000000000000000000000000000",
			"2000000000000000000000000000000000000000000000000000000000000000",
			"5555555555555555555555555555555555555555555555555555555555555555",
			"8888888888888888888888888888888888888888888888888888888888888888",
			"8888889999999999999999999999999999999999999999999999999999999999",
			"abcdef1234567890000000000000000000000000000000000000000000000000",
		}, items)
		require.Equal(t,
			"0000000000000000000000000000000000000000000000000000000000000000",
			hex.EncodeToString(it.Key().(KeyBytes)))

		it, err = s1.iter(
			util.FromHex("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0"))
		require.NoError(t, err)
		require.Equal(t,
			"0000000000000000000000000000000000000000000000000000000000000000",
			hex.EncodeToString(it.Key().(KeyBytes)))
	}
}
