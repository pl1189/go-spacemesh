// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package hashsync

import (
	"github.com/spacemeshos/go-scale"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

func (t *Marker) EncodeScale(enc *scale.Encoder) (total int, err error) {
	return total, nil
}

func (t *Marker) DecodeScale(dec *scale.Decoder) (total int, err error) {
	return total, nil
}

func (t *DoneMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Marker.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *DoneMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Marker.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EndRoundMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Marker.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EndRoundMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Marker.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EmptySetMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Marker.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EmptySetMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Marker.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EmptyRangeMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EmptyRangeMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *FingerprintMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.NumItems))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *FingerprintMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumItems = uint32(field)
	}
	return total, nil
}

func (t *RangeContentsMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.NumItems))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *RangeContentsMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.RangeX[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeY[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumItems = uint32(field)
	}
	return total, nil
}

func (t *ItemBatchMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.ContentKeys, 1024)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ItemBatchMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStructSliceWithLimit[types.Hash32](dec, 1024)
		if err != nil {
			return total, err
		}
		total += n
		t.ContentKeys = field
	}
	return total, nil
}

func (t *ProbeMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeOption(enc, t.RangeX)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.RangeY)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.SampleSize))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ProbeMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeOption[types.Hash32](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.RangeX = field
	}
	{
		field, n, err := scale.DecodeOption[types.Hash32](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.RangeY = field
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.SampleSize = uint32(field)
	}
	return total, nil
}

func (t *ProbeResponseMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeOption(enc, t.RangeX)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.RangeY)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.NumItems))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.Sample, 1000)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ProbeResponseMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeOption[types.Hash32](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.RangeX = field
	}
	{
		field, n, err := scale.DecodeOption[types.Hash32](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.RangeY = field
	}
	{
		n, err := scale.DecodeByteArray(dec, t.RangeFingerprint[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumItems = uint32(field)
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[MinhashSampleItem](dec, 1000)
		if err != nil {
			return total, err
		}
		total += n
		t.Sample = field
	}
	return total, nil
}
