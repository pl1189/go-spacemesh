// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=v2alpha1 -destination=./mocks.go -source=./interface.go
//

// Package v2alpha1 is a generated GoMock package.
package v2alpha1

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockidentityState is a mock of identityState interface.
type MockidentityState struct {
	ctrl     *gomock.Controller
	recorder *MockidentityStateMockRecorder
}

// MockidentityStateMockRecorder is the mock recorder for MockidentityState.
type MockidentityStateMockRecorder struct {
	mock *MockidentityState
}

// NewMockidentityState creates a new mock instance.
func NewMockidentityState(ctrl *gomock.Controller) *MockidentityState {
	mock := &MockidentityState{ctrl: ctrl}
	mock.recorder = &MockidentityStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockidentityState) EXPECT() *MockidentityStateMockRecorder {
	return m.recorder
}

// IdentityStates mocks base method.
func (m *MockidentityState) IdentityStates() map[types.IdentityDescriptor]types.IdentityState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentityStates")
	ret0, _ := ret[0].(map[types.IdentityDescriptor]types.IdentityState)
	return ret0
}

// IdentityStates indicates an expected call of IdentityStates.
func (mr *MockidentityStateMockRecorder) IdentityStates() *MockidentityStateIdentityStatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityStates", reflect.TypeOf((*MockidentityState)(nil).IdentityStates))
	return &MockidentityStateIdentityStatesCall{Call: call}
}

// MockidentityStateIdentityStatesCall wrap *gomock.Call
type MockidentityStateIdentityStatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockidentityStateIdentityStatesCall) Return(arg0 map[types.IdentityDescriptor]types.IdentityState) *MockidentityStateIdentityStatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockidentityStateIdentityStatesCall) Do(f func() map[types.IdentityDescriptor]types.IdentityState) *MockidentityStateIdentityStatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockidentityStateIdentityStatesCall) DoAndReturn(f func() map[types.IdentityDescriptor]types.IdentityState) *MockidentityStateIdentityStatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
